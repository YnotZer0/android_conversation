apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.vanniktech:gradle-android-javadoc-plugin:0.2.1'
  }
}

apply plugin: 'com.vanniktech.android.javadoc'

android {
  compileSdkVersion 26
  buildToolsVersion '26.0.1'

  defaultConfig {
    minSdkVersion 19
    targetSdkVersion 26
    versionCode 1
    versionName "1.0"

    ndk {
      moduleName "libspeex"
      moduleName "libOpusDecode"
    }
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    abortOnError false
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  testCompile 'junit:junit:4.12'
  compile 'com.android.support:appcompat-v7:26.0.0'
  compile ('net.java.dev.jna:jna:4.2.2') {
    transitive=true
  }
}

publishing {
  publications {
    aar(MavenPublication) {
      groupId 'com.ibm.watson.developer_cloud'
      version projectVersion
      artifactId 'android-sdk'
      artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

      pom.withXml {
        def dependencies = asNode().appendNode('dependencies')
        configurations.getByName("_releaseCompile").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
          def dependency = dependencies.appendNode('dependency')
          dependency.appendNode('groupId', it.moduleGroup)
          dependency.appendNode('artifactId', it.moduleName)
          dependency.appendNode('version', it.moduleVersion)
        }
      }
    }
  }
}

model {
  tasks.generatePomFileForAarPublication {
    destination = file("$buildDir/android-sdk.pom")
  }
}

task generateSourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath()
          .join(File.pathSeparator))
}

task generateJavadocsJar(type: Jar) {
  from generateJavadocs.destinationDir
  classifier 'javadoc'
}

generateJavadocsJar.dependsOn generateJavadocs